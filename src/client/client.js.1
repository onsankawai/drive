
var socket = io();

socket.on('message', function(data) {
    console.log(data.message);

});

//PlayCanvas sample code

var canvas = document.getElementById("application-canvas");

// Create the application and start the update loop
var app = new pc.Application(canvas);
app.start();

// Set the canvas to fill the window and automatically change resolution to be the same as the canvas size
app.setCanvasFillMode(pc.FILLMODE_FILL_WINDOW);
app.setCanvasResolution(pc.RESOLUTION_AUTO);
app.scene.ambientLight = new pc.Color(0.2, 0.2, 0.2);

// Create a Entity with a Box model component
var box = new pc.Entity();
box.addComponent("model", {
    type: "box",
});

box.setLocalScale(1, 1, 2);

// Create an Entity with a point light component and a sphere model component.
var light = new pc.Entity();
light.addComponent("light", {
    type: "point",
    color: new pc.Color(1, 0, 0),
    radius: 10
});

light.addComponent("model", {
    type: "sphere"
});

// Scale the sphere down to 0.1m
light.setLocalScale(0.1, 0.1, 0.1);

// Move the light in a circle
light.setLocalPosition(3, 3, 3);

// Create an Entity with a camera component
var camera = new pc.Entity();
camera.addComponent("camera", {
    clearColor: new pc.Color(0.4, 0.45, 0.5)
});

// Add the new Entities to the hierarchy
app.root.addChild(box);
app.root.addChild(light);
app.root.addChild(camera);

// Move the camera 10m along the z-axis
camera.translate(0, 3, 10);
camera.lookAt(0, 0, 0);

// Set an update function on the app's update event
var angle = 0;

var keyboard = new pc.Keyboard(document.body);

//fix default pressing space
keyboard.on(pc.EVENT_KEYDOWN, function(e) {
/*
    if( e.key === pc.KEY_SPACE ) {
        camera.translate(0, 3, 0);
    }
*/
    e.event.preventDefault();
}, this);

app.on("update", function (dt) {
    // Rotate the box
    //box.setEulerAngles(angle*5, 0, 0);
    if( keyboard.isPressed(pc.KEY_SPACE)) {
        angle += dt;
        if (angle > 360) {
            angle = 0;
        }
        camera.setPosition(10*Math.sin(angle), 3, 10*Math.cos(angle));
        camera.lookAt(0, 0, 0);
    }
});
